-- Step 0: Drop the table if it exists to ensure a clean slate.
-- The 'cascade' option will also remove any dependent objects like constraints or policies.
drop table if exists public.cart_items cascade;

-- Step 1: Create the cart_items table.
-- This table will store the products that users have added to their shopping cart.

create table public.cart_items (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.profiles(id) on delete cascade,
  product_variant_id uuid references public.product_variants(id) on delete cascade,
  combo_id bigint references public.combos(id) on delete cascade,
  quantity integer not null check (quantity > 0),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,

  -- Ensure that either a product_variant_id or a combo_id is present, but not both.
  constraint check_product_or_combo check (
    (product_variant_id is not null and combo_id is null) or
    (product_variant_id is null and combo_id is not null)
  ),

  -- Add a unique constraint to prevent duplicate items for the same user.
  -- A user should only have one row for each unique product variant or combo.
  constraint cart_items_user_id_product_variant_id_key unique (user_id, product_variant_id),
  constraint cart_items_user_id_combo_id_key unique (user_id, combo_id)
);

-- Step 2: Enable Row Level Security (RLS) for the new table.
-- This is crucial to ensure users can only access their own cart items.

alter table public.cart_items enable row level security;

-- Step 3: Create RLS policies.
-- Policy 1: Allow users to select (read) their own cart items.
create policy "Users can view their own cart items"
on public.cart_items for select
using (auth.uid() = user_id);

-- Policy 2: Allow users to insert (create) cart items for themselves.
create policy "Users can add items to their own cart"
on public.cart_items for insert
with check (auth.uid() = user_id);

-- Policy 3: Allow users to update their own cart items (e.g., quantity).
create policy "Users can update their own cart items"
on public.cart_items for update
using (auth.uid() = user_id);

-- Policy 4: Allow users to delete their own cart items.
create policy "Users can delete their own cart items"
on public.cart_items for delete
using (auth.uid() = user_id);